name: CI/CD Pipeline

on:
  push:
    branches: ["develop"] # develop 브랜치에 push될 때 (PR merge 포함)
  pull_request:
    branches: ["develop"] # develop으로 PR 생성시 CI만 실행

jobs:
  # CI Job - 테스트 실행
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Create application-secret.yml
      #   run: |
      #     mkdir -p ./src/main/resources
      #     cd ./src/main/resources
      #     echo "${{ secrets.YML_SECRET }}" | base64 --decode > ./application-secret.yml
      #     chmod 644 ./application-secret.yml
      #   shell: bash

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "corretto"

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew clean test

      - name: Build application
        run: ./gradlew build -x test

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          retention-days: 1

  # CD Job - 배포 실행 (develop 브랜치에 push될 때만)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: ./

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 앱 디렉토리 생성
            mkdir -p ~/app/backup

            # 기존 애플리케이션 중지
            echo "Stopping existing application..."
            sudo pkill -f 'java.*jar' || echo "No running application found"
            sleep 5

            # 기존 JAR 백업
            if [ -f ~/app/app.jar ]; then
              mv ~/app/app.jar ~/app/backup/app-backup-$(date +%Y%m%d_%H%M%S).jar
              echo "Previous version backed up"
            fi

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "*.jar"
          target: "~/app/"

      - name: Start Application
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/app

            # JAR 파일명을 일관되게 변경
            mv *.jar app.jar 2>/dev/null || echo "JAR file already named correctly"

            # 애플리케이션 시작
            echo "Starting application..."
            nohup java -Xmx512m -Xms256m -jar app.jar --spring.profiles.active=prod > app.log 2>&1 &

            # 시작 확인
            sleep 15

            if pgrep -f "java.*app.jar" > /dev/null; then
              echo "✅ Application started successfully!"
              echo "Process ID: $(pgrep -f 'java.*app.jar')"
              
              # 헬스 체크 (선택사항)
              sleep 10
              if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
                echo "✅ Health check passed!"
              else
                echo "⚠️ Application started but health check failed"
              fi
            else
              echo "❌ Application failed to start!"
              echo "Recent logs:"
              tail -20 app.log
              exit 1
            fi

  # 배포 성공 알림 (선택사항)
  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🚀 Deployment to EC2 completed successfully!"
          else
            echo "❌ Deployment failed!"
          fi
